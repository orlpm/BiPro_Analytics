// <auto-generated />
using System;
using BiPro_Analytics.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BiPro_Analytics.Migrations
{
    [DbContext(typeof(BiproAnalyticsDBContext))]
    [Migration("20201208022806_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BiPro_Analytics.Models.Empresa", b =>
                {
                    b.Property<int>("IdEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CantEmpleados")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiasLaborales")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaIngreso")
                        .HasColumnType("datetime2");

                    b.Property<string>("GiroEmpresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HorasLaborales")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<decimal?>("MaxSueldo")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinSueldo")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NombreEmpresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubGiroEmpresa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEmpresa");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("BiPro_Analytics.Models.Incapacidad", b =>
                {
                    b.Property<int>("IdIncapacidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("FechaHoraFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaHoraInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdTrabajador")
                        .HasColumnType("int");

                    b.Property<string>("MotivoIncapacidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreEmpleado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeEncuentraEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoIncapacidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TrabajadorIdTrabajador")
                        .HasColumnType("int");

                    b.HasKey("IdIncapacidad");

                    b.HasIndex("TrabajadorIdTrabajador");

                    b.ToTable("Incapacidades");
                });

            modelBuilder.Entity("BiPro_Analytics.Models.RegistroPrueba", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("APGustativa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("APOlfativa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnostico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discriminacion")
                        .HasColumnType("int");

                    b.Property<int?>("IdTrabajador")
                        .HasColumnType("int");

                    b.Property<int>("Mas15cm")
                        .HasColumnType("int");

                    b.Property<int>("Menos15cm")
                        .HasColumnType("int");

                    b.Property<int>("PIE3")
                        .HasColumnType("int");

                    b.Property<int>("PIE4")
                        .HasColumnType("int");

                    b.Property<int>("PIE5")
                        .HasColumnType("int");

                    b.Property<float>("PorcentajeO2")
                        .HasColumnType("real");

                    b.Property<string>("ResultadoIgG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultadoIgM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultadoPCR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Temperatura")
                        .HasColumnType("real");

                    b.Property<string>("TipoSangre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.Property<int?>("TrabajadorIdTrabajador")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrabajadorIdTrabajador");

                    b.ToTable("RegistroPruebas");
                });

            modelBuilder.Entity("BiPro_Analytics.Models.RiesgosTrabajador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AniosFumar")
                        .HasColumnType("int");

                    b.Property<bool>("Anosmia")
                        .HasColumnType("bit");

                    b.Property<string>("AreaTrabajo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Artralgias")
                        .HasColumnType("bit");

                    b.Property<bool>("Asma")
                        .HasColumnType("bit");

                    b.Property<string>("CantidadPersonas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Cianosis")
                        .HasColumnType("bit");

                    b.Property<int>("CigarrosDia")
                        .HasColumnType("int");

                    b.Property<bool>("CirugiaNasal")
                        .HasColumnType("bit");

                    b.Property<bool>("Conjuntivitis")
                        .HasColumnType("bit");

                    b.Property<string>("ContactoCovid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Diabetes")
                        .HasColumnType("bit");

                    b.Property<bool>("DiagnosticoCovid")
                        .HasColumnType("bit");

                    b.Property<bool>("Diarrea")
                        .HasColumnType("bit");

                    b.Property<bool>("Disgeusia")
                        .HasColumnType("bit");

                    b.Property<bool>("Disnea")
                        .HasColumnType("bit");

                    b.Property<bool>("DolorAbdomina")
                        .HasColumnType("bit");

                    b.Property<bool>("DolorCabeza")
                        .HasColumnType("bit");

                    b.Property<bool>("DolorToracico")
                        .HasColumnType("bit");

                    b.Property<bool>("Embarazo")
                        .HasColumnType("bit");

                    b.Property<bool>("EnfermedadCronica")
                        .HasColumnType("bit");

                    b.Property<bool>("Escalofrios")
                        .HasColumnType("bit");

                    b.Property<bool>("Fiebre")
                        .HasColumnType("bit");

                    b.Property<bool>("Fumador")
                        .HasColumnType("bit");

                    b.Property<bool>("Hipertension")
                        .HasColumnType("bit");

                    b.Property<int?>("IdTrabajador")
                        .HasColumnType("int");

                    b.Property<bool>("Irritabilidad")
                        .HasColumnType("bit");

                    b.Property<bool>("Mas65")
                        .HasColumnType("bit");

                    b.Property<bool>("Mialgias")
                        .HasColumnType("bit");

                    b.Property<bool>("Ninguna")
                        .HasColumnType("bit");

                    b.Property<string>("NombreECronica")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NombreRinofaringea")
                        .HasColumnType("bit");

                    b.Property<bool>("Obesidad")
                        .HasColumnType("bit");

                    b.Property<bool>("Odinofagia")
                        .HasColumnType("bit");

                    b.Property<string>("Picante")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Polipnea")
                        .HasColumnType("bit");

                    b.Property<bool>("Rinitis")
                        .HasColumnType("bit");

                    b.Property<bool>("Rinofaringea")
                        .HasColumnType("bit");

                    b.Property<bool>("Rinorrea")
                        .HasColumnType("bit");

                    b.Property<bool>("Sinusitis")
                        .HasColumnType("bit");

                    b.Property<string>("TipoTransporte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Tos")
                        .HasColumnType("bit");

                    b.Property<int?>("TrabajadorIdTrabajador")
                        .HasColumnType("int");

                    b.Property<bool>("TrabajoEnCasa")
                        .HasColumnType("bit");

                    b.Property<bool>("Vómito")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("TrabajadorIdTrabajador");

                    b.ToTable("RiesgosTrabajadores");
                });

            modelBuilder.Entity("BiPro_Analytics.Models.Trabajador", b =>
                {
                    b.Property<int>("IdTrabajador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ciudad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FK_EmpresasId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaNacimiento")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdEmpresa")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTrabajador");

                    b.HasIndex("FK_EmpresasId");

                    b.ToTable("Trabajadores");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BiPro_Analytics.Models.Incapacidad", b =>
                {
                    b.HasOne("BiPro_Analytics.Models.Trabajador", "Trabajador")
                        .WithMany("Incapacidades")
                        .HasForeignKey("TrabajadorIdTrabajador");
                });

            modelBuilder.Entity("BiPro_Analytics.Models.RegistroPrueba", b =>
                {
                    b.HasOne("BiPro_Analytics.Models.Trabajador", "Trabajador")
                        .WithMany("RegistroPruebas")
                        .HasForeignKey("TrabajadorIdTrabajador");
                });

            modelBuilder.Entity("BiPro_Analytics.Models.RiesgosTrabajador", b =>
                {
                    b.HasOne("BiPro_Analytics.Models.Trabajador", "Trabajador")
                        .WithMany("RiesgosTrabajadores")
                        .HasForeignKey("TrabajadorIdTrabajador");
                });

            modelBuilder.Entity("BiPro_Analytics.Models.Trabajador", b =>
                {
                    b.HasOne("BiPro_Analytics.Models.Empresa", "Empresa")
                        .WithMany("Trabajadores")
                        .HasForeignKey("FK_EmpresasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
